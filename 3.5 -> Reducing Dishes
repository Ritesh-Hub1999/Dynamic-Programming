https://leetcode.com/problems/reducing-dishes/

Example 1:
-----------
Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.

Example 2:
----------
Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)

Example 3:
--------
Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People do not like the dishes. No dish is prepared.

//cheif koi bhi sidh discard kar sakta hai
//so koi bhi include kr sakta hai and exclude
  bhi kar sakta hai
  
Approch:
-------
-> sort an array
-> agr index array ka size sa bahar hojai 
  ya size ka equal ajai tho return 0
-> cheif can choice nay dish. So,hum
  yaha include exclude ka game khel sakta hai.
  
  Code:
  ----
  int solve(vector<int>& satisfaction,int i,int num){
        if(i==satisfaction.size()){
            return 0;
        }
        
        int include = satisfaction[i]*num + solve(satisfaction,i+1,num+1);
        
        int exclude =  solve(satisfaction,i+1,num);
        
        return max(include,exclude);
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        return solve(satisfaction,0,1);
    }
    
  Rec+Memo:
  ---------
      if(i==satisfaction.size()){
            return 0;
        }
        if(dp[i][num] != -1)
            return dp[i][num];
        
        int include = satisfaction[i]*num + solve(satisfaction,i+1,num+1,dp);
        
        int exclude =  solve(satisfaction,i+1,num,dp);
        
        return dp[i][num]=max(include,exclude);
    }
    
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        vector<vector<int>>dp(satisfaction.size()+1,vector<int>(satisfaction.size()+1,-1));
        return solve(satisfaction,0,1,dp);
    }
