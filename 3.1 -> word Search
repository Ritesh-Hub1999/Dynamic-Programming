
Example 1:
----------
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
----------
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
----------
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false

Approch:
--------
-> Har ek cell sa start karenga word ban paiga ki nai.
-> left,right,up,down movement possible hai

left right up down movement ka lia condition:
--------------------------------------
-> visited nai hona cahiya
-> char match hona cahiya
-> boundary check(index out of bound nai jana cahiya)

code:
-----
bool solve(vector<vector<char>>& board,string &word,int i,int j,int k){
        //safe or not
        //boundary check
        if(i<0 || i>=board.size()){
            return false;
        }
        if(j<0 || j>=board[0].size()){
            return false;
        }
        //visited nai hona cahiya
        if(board[i][j]=='-'){
            return false;
        }
        //if char dosn't match
        if(board[i][j]!=word[k]){
            return false;
        }
        
        //base case
        if(k==word.length()-1){
            return true;
        }
        char ch=board[i][j];
        board[i][j]='-';
        
        bool left=solve(board,word,i,j-1,k+1);
        bool right=solve(board,word,i,j+1,k+1);
        bool up=solve(board,word,i-1,j,k+1);
        bool down=solve(board,word,i+1,j,k+1);
        
        //backtrack
        
        board[i][j]=ch;
        return left||right||up||down;
        
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        int row=board.size();
        int col=board[0].size();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(solve(board,word,i,j,0))
                    return true;
            }
        }
        return false;
    }
