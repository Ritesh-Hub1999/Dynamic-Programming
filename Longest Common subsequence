Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.

Approch:
--------
if(str1[i] == str2[j])
if index matches of both the string than increase both index+1.

agr str match nai hua tho 
ek baar: i index + 1 kia if matches and ek bar j index + 1 kia 

code using recursion
------------------
int solve(string &str1,string &str2,int i, int j){
        //basecase
        if(i == str1.length()){
            return 0;
        }
        
        if(j == str2.length()){
            return 0;
        }
        
        int ans = 0;
        //agr pehla char match hojai
        
        if(str1[i] == str2[j]){
             ans = solve(str1,str2,i+1,j+1,dp) + 1;
        }
        
        //agr pehla char match nai kia tho i agga bardha kr check krenga maybe wo second str sa match hojai
        
        else{
            int option1 = solve(str1,str2,i+1,j);
            int option2 = solve(str1,str2,i,j+1);
            ans =max(option1,option2);
        }
        
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        return solve(text1,text2,0,0,dp);
    }
    
recursion + memo
----------------
int solve(string &str1,string &str2,int i, int j,vector<vector<int> >& dp){
        //basecase
        if(i == str1.length()){
            return 0;
        }
        
        if(j == str2.length()){
            return 0;
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int ans = 0;
        //agr pehla char match hojai
        
        if(str1[i] == str2[j]){
             ans = solve(str1,str2,i+1,j+1,dp) + 1;
        }
        
        //agr pehla char match nai kia tho i agga bardha kr check krenga maybe wo second str sa match hojai
        
        else{
            int option1 = solve(str1,str2,i+1,j,dp);
            int option2 = solve(str1,str2,i,j+1,dp);
            ans =max(option1,option2);
        }
        
        return dp[i][j] = ans;
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int> >dp(text1.length()+1,vector<int>(text2.length()+1,-1));
        return solve(text1,text2,0,0,dp);
    }
   
Tabular Method
---------------
int solveTab(string &str1,string &str2){
        //DP vector create kro
        vector<vector<int> >dp(str1.length()+1,vector<int>(str2.length()+1,0));

        //for loop
        for(int i=str1.length()-1;i>=0;i--){
            for(int j =str2.length()-1;j>=0;j--){
                int ans=0;
                    if(str1[i] == str2[j]){
                    ans = dp[i+1][j+1] + 1;
                }   
        
        //agr pehla char match nai kia tho i agga bardha kr check krenga maybe wo second str sa match hojai
        
                else{
                    int option1 = dp[i+1][j];
                    int option2 = dp[i][j+1];
                    ans =max(option1,option2);
                }
                dp[i][j] = ans;
            }
        }
        return dp[0][0];
    }
    
