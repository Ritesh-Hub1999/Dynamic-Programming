https://leetcode.com/problems/min-cost-climbing-stairs/description/

Example 1:
----------
Input: cost = [10,15,20]
Output: 15

Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.

Example 2:
----------
Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6

Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.

Approch:
--------
step1 :  //here in the question given we can start jump from 
        //0 index and 1 index
        // so kaha sa hama minimum mil sakta hai
        
step 2: Base case - agr index array ka bahar gaya tho 0 return karna hai
        ---------
        
step 3:                    2 call jaiga
                             /       \
                            /         \
                           /           \
                          /             \
            1 jump le sakta hai     2 jump bhi le sakta hai
            
            hama isma sa phr minimum ans check krna hai
Code:
----
int solve(vector<int>& cost,int i){
        if(i >= cost.size())
            return 0;

        int jump1 = cost[i] + solve(cost,i+1);

        int jump2 = cost[i] + solve(cost,i+2);

        return min(jump1,jump2);
    }

    int minCostClimbingStairs(vector<int>& cost) {

        //here in the question given we can start jump from 
        //0 index and 1 index
        // so kaha sa hama minimum mil sakta hai

        return min(solve(cost,0),solve(cost,1));
    }
    
 rec+Memo
 --------
 int solveMem(vector<int>& cost,int i,vector<int> &dp){
        if(i >= cost.size())
            return 0;

        if(dp[i] != -1)
            return dp[i];

        //so hum 1 jump le sakta hai 
        int jump1 = cost[i] + solveMem(cost,i+1,dp);

        //so hum 2 jump bhi le sakta hai
        int jump2 = cost[i] + solveMem(cost,i+2,dp);

        //minimum dekhna hai kaha sa cost lagega
        return dp[i] = min(jump1,jump2);
    }

    int minCostClimbingStairs(vector<int>& cost) {

        //here in the question given we can start jump from 
        //0 index and 1 index
        // so kaha sa hama minimum mil sakta hai
        vector<int>dp(cost.size()+1,-1);

        return min(solveMem(cost,0,dp),solveMem(cost,1,dp));
    }
